apiVersion: v1
kind: Template
metadata:
  name: mattermost
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${APPLICATION_NAME}-docker
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      git:
        uri: https://github.com/goern/mattermost-openshift
        ref: "centos7"
      type: Git
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: centos:latest
      type: Docker
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- kind: "ImageStream"
  apiVersion: "v1"
  metadata:
    description: "This is a GO1.6 builder"
    name: "s2i-go-16"
  spec:
    dockerImageRepository: "goern/go-16-centos7"
  tags:
    - name: "latest"
- kind: "BuildConfig"
  apiVersion: "v1"
  metadata:
    name: "mattermost-s2i"
    annotations:
      description: "Defines how to build the mattermost platform"
  spec:
    completionDeadlineSeconds: 480
    source:
      type: "Git"
      git:
        uri: "https://github.com/mattermost/platform.git"
    strategy:
      type: "Source"
      sourceStrategy:
        from:
          kind: "ImageStreamTag"
          name: "s2i-go-16:latest"
    output:
      to:
        kind: "ImageStreamTag"
        name: "mattermost:latest"
    triggers:
      - type: "ImageChange"
      - type: "ConfigChange"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    selector:
      name: ${APPLICATION_NAME}
    replicas: 1
    template:
      metadata:
        labels:
          name: ${APPLICATION_NAME}
      spec:
        containers:
        - image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8065
          env:
          - name: DRIVER_NAME
            value: mysql
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: centos
  spec:
    dockerImageRepository: docker.io/centos
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8065-tcp
      port: 8065
      protocol: TCP
      targetPort: 8065
    selector:
      deploymentconfig: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
  spec:
    portalIP: ""
    ports:
    - name: mysql
      nodePort: 0
      port: 3306
      protocol: TCP
      targetPort: 3306
    selector:
      name: ${DATABASE_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          image: mysql
          imagePullPolicy: IfNotPresent
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          resources: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.6
          namespace: openshift
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Route
  metadata:
    name: "frontend"
    labels:
      app: "mattermost"
  spec:
    host: ""
    to:
      kind: "Service"
      name: "${APPLICATION_NAME}"
    tls:
      termination: edge
parameters:
- name: APPLICATION_NAME
  required: true
  value: mattermost
- description: Database service name
  name: DATABASE_SERVICE_NAME
  required: true
  value: db
- description: Username for MySQL user that will be used for accessing the database
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MySQL user
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Database name
  name: MYSQL_DATABASE
  required: true
  value: mattermost
- description: Volume space available for data, e.g. 512Mi, 2Gi
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
